version: '3.8'

name: dai-lab-http

services:
  web:
    build: ./frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.static.rule=Host(`static.traefik.me`) && PathPrefix(`/`)"
      - "traefik.http.services.static.loadbalancer.server.port=80"
      - "traefik.http.routers.static.tls=true"
    env_file:
      - .env
    deploy:
      replicas: 1

  mongo:
    container_name: mongodb
    image: mongo:latest
    env_file:
      - .env
    ports:
      - "27017:27017"

  mongo-seed:
    env_file:
      - .env
    build:
      context: ./db
      dockerfile: Dockerfile
      args:
        - MONGODB_URI=$DATABASE_URI
        - MONGODB_HOST=$MONGO_INITDB_ROOT_HOST
        - MONGODB_USERNAME=$MONGO_INITDB_ROOT_USERNAME
        - MONGODB_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD
    depends_on:
      - mongo

  api:
    env_file:
      - .env
    build:
      context: ./api
      dockerfile: Dockerfile
      args:
        - MONGODB_URI=$DATABASE_URI
        - MONGODB_HOST=$MONGO_INITDB_ROOT_HOST
        - MONGODB_USERNAME=$MONGO_INITDB_ROOT_USERNAME
        - MONGODB_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api2.rule=Host(`api.traefik.me`) && PathPrefix(`/api`)"
      - "traefik.http.services.api2.loadbalancer.server.port=7000"
      - "traefik.http.services.api2.loadBalancer.sticky.cookie=true"
      - "traefik.http.services.api2.loadBalancer.sticky.cookie.name=api"
      - "traefik.http.routers.api2.tls=true"
      - "traefik.http.routers.api2.middlewares=cors"

    deploy:
      replicas: 1
    depends_on:
      - mongo

  reverse-proxy:
    image: traefik:v2.10
    labels:
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https_redirect.redirectscheme.permanent=true"
      - "traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)"
      - "traefik.http.routers.http_catchall.entrypoints=http"
      - "traefik.http.routers.http_catchall.middlewares=https_redirect"

      - "traefik.http.routers.dashboard.rule=Host(`traefik.traefik.me`)"
      - "traefik.http.routers.dashboard.service=dashboard@internal"
      - "traefik.http.routers.dashboard.tls=true"

      - "traefik.http.routers.api.rule=Host(`traefik.traefik.me`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.tls=true"

      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,PATCH,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowheaders=Content-Type"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./tls.yml:/etc/traefik/tls.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - certs:/etc/ssl/traefik

  reverse-proxy-https-helper:
    image: alpine
    command: sh -c "cd /etc/ssl/traefik && wget traefik.me/cert.pem -O cert.pem && wget traefik.me/privkey.pem -O privkey.pem"
    volumes:
      - certs:/etc/ssl/traefik

  management-ui:
    env_file:
      - .env
    build:
      context: ./management-ui
      dockerfile: Dockerfile
      args:
        - COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME
        - COMPOSE_SERVICES=$COMPOSE_SERVICES
        - COMPOSE_MAX_SCALE=$COMPOSE_MAX_SCALE
    privileged: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mgmt.rule=Host(`mgmt.traefik.me`)"
      - "traefik.http.services.mgmt.loadbalancer.server.port=3000"
      - "traefik.http.services.mgmt.loadBalancer.sticky.cookie=true"
      - "traefik.http.services.mgmt.loadBalancer.sticky.cookie.name=mgmt-session"
      - "traefik.http.routers.mgmt.tls=true"
    volumes:
      - /:/host:ro
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  certs:
